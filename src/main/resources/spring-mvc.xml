<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
    
    <description>Spring MVC Configuration</description>
    
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" />
	
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.thinkgem.jeesite" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
		</property>
		<property name="prettyPrint" value="false"/>
		<property name="objectMapper">
			<bean class="com.thinkgem.jeesite.common.mapper.JsonMapper"></bean>
		</property>
	</bean>

	<!-- 使用XML格式输出数据 -->
	<bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<constructor-arg>
			<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
				<property name="streamDriver">
					<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
				</property>
				<property name="annotatedClasses">
					<list>
						<value>com.thinkgem.jeesite.common.persistence.BaseEntity</value>
						<value>com.thinkgem.jeesite.common.supcan.treelist.TreeList</value>
						<value>com.thinkgem.jeesite.common.supcan.treelist.cols.Col</value>
						<value>com.thinkgem.jeesite.common.supcan.treelist.cols.Group</value>
					</list>
				</property>
			</bean>
		</constructor-arg>
		<property name="supportedMediaTypes" value="application/xml"></property>
	</bean>

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<ref bean="mappingJacksonHttpMessageConverter"/>
            <ref bean="marshallingHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map> 
                <entry key="xml" value="application/xml"/> 
                <entry key="json" value="application/json"/>
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class='org.springframework.http.converter.ByteArrayHttpMessageConverter'/>
                <bean class='org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter'/>
                <bean class='org.springframework.http.converter.StringHttpMessageConverter'></bean>
                <bean class='org.springframework.http.converter.ResourceHttpMessageConverter'></bean>
                <bean class='org.springframework.http.converter.xml.SourceHttpMessageConverter'></bean>
                <bean class='org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter'></bean>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>


	<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/"/>
		<property name="configLocation" value="classpath:velocity.properties"/>
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
				<prop key="velocimacro.library">
					macro/macros.vm,macro/sys_macros.vm
				</prop>
			</props>
		</property>
	</bean>

	<bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
		<property name="cache" value="false"/>
		<property name="prefix" value=""/>
		<property name="suffix" value=".vm"/>
		<property name="layoutUrl" value="layouts/layout.vm" />
		<property name="contentType" value="text/html;charset=UTF-8"/>
		<property name="exposeSpringMacroHelpers" value="true"/>
		<property name="dateToolAttribute" value="dateTool"/>
		<property name="requestContextAttribute" value="request"/>
		<property name="exposeRequestAttributes" value="true"/>
        <property name="toolboxConfigLocation" value="/WEB-INF/classes/toolbox.xml"/>
		<property name="attributes">
			<props>
				<prop key="ctxStatic">/jeesite/static</prop>
				<prop key="ctx">/jeesite${adminPath}</prop>
			</props>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager"/>
		<property name="viewResolvers">
			<list>
				<ref bean="viewResolver"/>
			</list>
		</property>
	</bean>

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	
	<!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>
	
	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
			</props>
			</property>
	</bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->
	
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
		<property name="maxUploadSize" value="${web.maxUploadSize}" />  
	</bean>

	<import resource="spring-mvc-interceptor.xml"/>
	
</beans>